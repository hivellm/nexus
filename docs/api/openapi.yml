openapi: 3.0.3
info:
  title: Nexus Graph Database API
  description: |
    High-performance graph database with native vector similarity search capabilities.
    
    ## Features
    - Graph database with Cypher query support
    - KNN vector similarity search
    - REST API with comprehensive endpoints
    - Server-Sent Events (SSE) for real-time streaming
    - Bulk data ingestion
    - Schema management
    - MCP (Model Context Protocol) integration
    
    ## Authentication
    Currently no authentication is required. All endpoints are publicly accessible.
    
    ## Rate Limiting
    No rate limiting is currently implemented. Consider implementing rate limiting for production deployments.
    
    ## Error Handling
    All endpoints return appropriate HTTP status codes and error messages in JSON format.
  version: 0.4.0
  contact:
    name: Nexus Development Team
    url: https://github.com/your-org/nexus
    email: support@nexus-db.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3000
    description: Development server
  - url: https://api.nexus-db.com
    description: Production server

paths:
  /health:
    get:
      summary: Health Check
      description: Returns server health status and version information
      operationId: healthCheck
      tags:
        - System
      responses:
        '200':
          description: Server is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "ok"
                  version:
                    type: string
                    example: "0.4.0"
                  timestamp:
                    type: string
                    format: date-time
                  uptime:
                    type: number
                    description: Server uptime in seconds
                  protocol:
                    type: string
                    example: "nexus/1.0"

  /cypher:
    post:
      summary: Execute Cypher Query
      description: |
        Execute a Cypher query against the graph database.
        
        ## Supported Cypher Features
        - MATCH patterns with nodes and relationships
        - WHERE clauses with property filtering
        - RETURN clauses with expressions
        - LIMIT and ORDER BY
        - Aggregation functions (COUNT, AVG, MAX, MIN, SUM)
        - Variable length paths with `*` syntax
        - Vector similarity search with `<->` operator
        
        ## Examples
        ```cypher
        // Find all nodes
        MATCH (n) RETURN n LIMIT 10
        
        // Find nodes with conditions
        MATCH (n:Person) WHERE n.age > 25 RETURN n.name, n.age
        
        // Vector similarity search
        MATCH (n:Person) WHERE n.vector IS NOT NULL 
        RETURN n.name ORDER BY n.vector <-> [0.1, 0.2, 0.3] LIMIT 5
        ```
      operationId: executeCypher
      tags:
        - Queries
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CypherRequest'
            examples:
              simple_query:
                summary: Simple query
                value:
                  query: "MATCH (n:Person) RETURN n.name, n.age LIMIT 10"
                  params: {}
              parameterized_query:
                summary: Query with parameters
                value:
                  query: "MATCH (n:Person) WHERE n.age > $min_age RETURN n.name, n.age"
                  params:
                    min_age: 25
              vector_query:
                summary: Vector similarity query
                value:
                  query: "MATCH (n:Person) WHERE n.vector IS NOT NULL RETURN n.name ORDER BY n.vector <-> $vector LIMIT 5"
                  params:
                    vector: [0.1, 0.2, 0.3, 0.4]
      responses:
        '200':
          description: Query executed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CypherResponse'
        '400':
          description: Invalid query syntax or parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '408':
          description: Query timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /knn_traverse:
    post:
      summary: KNN Traversal
      description: |
        Perform k-nearest neighbor traversal starting from a vector query.
        
        This endpoint combines vector similarity search with graph traversal,
        allowing you to find similar entities and then traverse their relationships.
      operationId: knnTraverse
      tags:
        - Vector Search
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KnnTraverseRequest'
            examples:
              basic_knn:
                summary: Basic KNN search
                value:
                  label: "Person"
                  vector: [0.1, 0.2, 0.3, 0.4]
                  k: 10
              knn_with_filter:
                summary: KNN with additional filters
                value:
                  label: "Person"
                  vector: [0.1, 0.2, 0.3, 0.4]
                  k: 5
                  where: "n.age > 25"
                  limit: 50
      responses:
        '200':
          description: KNN traversal completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KnnTraverseResponse'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /ingest:
    post:
      summary: Bulk Data Ingestion
      description: |
        Ingest large amounts of nodes and relationships in a single operation.
        
        This endpoint is optimized for bulk data loading and provides
        throughput metrics for performance monitoring.
      operationId: ingestData
      tags:
        - Data Management
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IngestRequest'
            examples:
              bulk_nodes:
                summary: Bulk node ingestion
                value:
                  nodes:
                    - labels: ["Person"]
                      properties:
                        name: "Alice"
                        age: 30
                    - labels: ["Person"]
                      properties:
                        name: "Bob"
                        age: 28
                  relationships: []
              bulk_relationships:
                summary: Bulk relationship ingestion
                value:
                  nodes: []
                  relationships:
                    - src: 1
                      dst: 2
                      type: "KNOWS"
                      properties:
                        since: "2020"
      responses:
        '200':
          description: Data ingested successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IngestResponse'
        '400':
          description: Invalid data format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /schema/labels:
    get:
      summary: List Labels
      description: List all node labels in the database
      operationId: listLabels
      tags:
        - Schema
      responses:
        '200':
          description: Labels retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LabelListResponse'
    post:
      summary: Create Label
      description: Create a new node label
      operationId: createLabel
      tags:
        - Schema
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLabelRequest'
      responses:
        '200':
          description: Label created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateLabelResponse'
        '400':
          description: Invalid label name
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /schema/rel_types:
    get:
      summary: List Relationship Types
      description: List all relationship types in the database
      operationId: listRelTypes
      tags:
        - Schema
      responses:
        '200':
          description: Relationship types retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RelTypeListResponse'
    post:
      summary: Create Relationship Type
      description: Create a new relationship type
      operationId: createRelType
      tags:
        - Schema
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRelTypeRequest'
      responses:
        '200':
          description: Relationship type created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateRelTypeResponse'
        '400':
          description: Invalid relationship type name
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /data/nodes:
    post:
      summary: Create Node
      description: Create a single node with labels and properties
      operationId: createNode
      tags:
        - Data Management
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNodeRequest'
      responses:
        '200':
          description: Node created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateNodeResponse'
    put:
      summary: Update Node
      description: Update properties of an existing node
      operationId: updateNode
      tags:
        - Data Management
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateNodeRequest'
      responses:
        '200':
          description: Node updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateNodeResponse'
    delete:
      summary: Delete Node
      description: Delete a node and all its relationships
      operationId: deleteNode
      tags:
        - Data Management
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteNodeRequest'
      responses:
        '200':
          description: Node deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteNodeResponse'

  /data/relationships:
    post:
      summary: Create Relationship
      description: Create a single relationship between two nodes
      operationId: createRel
      tags:
        - Data Management
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRelRequest'
      responses:
        '200':
          description: Relationship created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateRelResponse'

  /stats:
    get:
      summary: Database Statistics
      description: Get comprehensive database statistics including node counts, relationship counts, and index information
      operationId: getStats
      tags:
        - System
      responses:
        '200':
          description: Statistics retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatsResponse'

  /sse/cypher:
    get:
      summary: Stream Cypher Query Results
      description: |
        Stream Cypher query results using Server-Sent Events (SSE).
        
        This endpoint allows real-time streaming of query results,
        useful for monitoring and real-time applications.
      operationId: streamCypherQuery
      tags:
        - Streaming
      parameters:
        - name: query
          in: query
          description: Cypher query to execute
          required: false
          schema:
            type: string
            default: "MATCH (n) RETURN n LIMIT 10"
        - name: interval
          in: query
          description: Interval between query executions in milliseconds
          required: false
          schema:
            type: integer
            default: 1000
            minimum: 100
            maximum: 60000
        - name: limit
          in: query
          description: Maximum number of query executions
          required: false
          schema:
            type: integer
            default: 100
            minimum: 1
            maximum: 1000
      responses:
        '200':
          description: SSE stream started
          content:
            text/event-stream:
              schema:
                type: string
                description: Server-Sent Events stream

  /sse/stats:
    get:
      summary: Stream Database Statistics
      description: Stream database statistics using Server-Sent Events
      operationId: streamStats
      tags:
        - Streaming
      parameters:
        - name: interval
          in: query
          description: Interval between statistics updates in milliseconds
          required: false
          schema:
            type: integer
            default: 2000
            minimum: 1000
            maximum: 60000
        - name: limit
          in: query
          description: Maximum number of statistics updates
          required: false
          schema:
            type: integer
            default: 50
            minimum: 1
            maximum: 1000
      responses:
        '200':
          description: SSE stream started
          content:
            text/event-stream:
              schema:
                type: string
                description: Server-Sent Events stream

  /sse/heartbeat:
    get:
      summary: Heartbeat Stream
      description: Stream heartbeat events using Server-Sent Events
      operationId: streamHeartbeat
      tags:
        - Streaming
      parameters:
        - name: interval
          in: query
          description: Interval between heartbeat events in milliseconds
          required: false
          schema:
            type: integer
            default: 5000
            minimum: 1000
            maximum: 60000
        - name: limit
          in: query
          description: Maximum number of heartbeat events
          required: false
          schema:
            type: integer
            default: 1000
            minimum: 1
            maximum: 10000
      responses:
        '200':
          description: SSE stream started
          content:
            text/event-stream:
              schema:
                type: string
                description: Server-Sent Events stream

components:
  schemas:
    CypherRequest:
      type: object
      required:
        - query
      properties:
        query:
          type: string
          description: Cypher query to execute
          example: "MATCH (n:Person) RETURN n.name, n.age LIMIT 10"
        params:
          type: object
          description: Query parameters
          additionalProperties: true
          example:
            min_age: 25
            name: "Alice"
        timeout_ms:
          type: integer
          description: Query timeout in milliseconds
          default: 5000
          minimum: 100
          maximum: 60000

    CypherResponse:
      type: object
      properties:
        results:
          type: array
          description: Query results
          items:
            type: object
            additionalProperties: true
        execution_time_ms:
          type: integer
          description: Query execution time in milliseconds
        error:
          type: string
          description: Error message if query failed

    KnnTraverseRequest:
      type: object
      required:
        - label
        - vector
        - k
      properties:
        label:
          type: string
          description: Node label to search
          example: "Person"
        vector:
          type: array
          items:
            type: number
          description: Query vector for similarity search
          example: [0.1, 0.2, 0.3, 0.4]
        k:
          type: integer
          description: Number of nearest neighbors to find
          minimum: 1
          maximum: 1000
          example: 10
        where:
          type: string
          description: Additional WHERE clause for filtering
          example: "n.age > 25"
        limit:
          type: integer
          description: Maximum number of results to return
          minimum: 1
          maximum: 10000
          default: 100

    KnnTraverseResponse:
      type: object
      properties:
        results:
          type: array
          description: KNN traversal results
          items:
            type: object
            properties:
              node:
                type: object
                description: Node data
                additionalProperties: true
              similarity:
                type: number
                description: Similarity score
                minimum: 0
                maximum: 1
        execution_time_ms:
          type: integer
          description: Execution time in milliseconds
        error:
          type: string
          description: Error message if operation failed

    IngestRequest:
      type: object
      properties:
        nodes:
          type: array
          description: Nodes to ingest
          items:
            $ref: '#/components/schemas/NodeIngest'
        relationships:
          type: array
          description: Relationships to ingest
          items:
            $ref: '#/components/schemas/RelIngest'

    NodeIngest:
      type: object
      properties:
        id:
          type: integer
          description: Node ID (optional, auto-generated if not provided)
        labels:
          type: array
          items:
            type: string
          description: Node labels
          example: ["Person", "Developer"]
        properties:
          type: object
          description: Node properties
          additionalProperties: true
          example:
            name: "Alice"
            age: 30
            email: "alice@example.com"

    RelIngest:
      type: object
      required:
        - src
        - dst
        - type
      properties:
        id:
          type: integer
          description: Relationship ID (optional, auto-generated if not provided)
        src:
          type: integer
          description: Source node ID
        dst:
          type: integer
          description: Destination node ID
        type:
          type: string
          description: Relationship type
          example: "KNOWS"
        properties:
          type: object
          description: Relationship properties
          additionalProperties: true
          example:
            since: "2020"
            strength: 0.8

    IngestResponse:
      type: object
      properties:
        nodes_ingested:
          type: integer
          description: Number of nodes successfully ingested
        relationships_ingested:
          type: integer
          description: Number of relationships successfully ingested
        execution_time_ms:
          type: integer
          description: Ingestion execution time in milliseconds
        errors:
          type: array
          items:
            type: string
          description: List of errors encountered during ingestion

    CreateLabelRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: Label name
          example: "Person"
          minLength: 1
          maxLength: 255

    CreateLabelResponse:
      type: object
      properties:
        label_id:
          type: integer
          description: Created label ID
        error:
          type: string
          description: Error message if creation failed

    LabelListResponse:
      type: object
      properties:
        labels:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
              name:
                type: string
        error:
          type: string
          description: Error message if operation failed

    CreateRelTypeRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: Relationship type name
          example: "KNOWS"
          minLength: 1
          maxLength: 255

    CreateRelTypeResponse:
      type: object
      properties:
        type_id:
          type: integer
          description: Created relationship type ID
        error:
          type: string
          description: Error message if creation failed

    RelTypeListResponse:
      type: object
      properties:
        types:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
              name:
                type: string
        error:
          type: string
          description: Error message if operation failed

    CreateNodeRequest:
      type: object
      required:
        - labels
      properties:
        labels:
          type: array
          items:
            type: string
          description: Node labels
          example: ["Person", "Developer"]
        properties:
          type: object
          description: Node properties
          additionalProperties: true
          example:
            name: "Alice"
            age: 30

    CreateNodeResponse:
      type: object
      properties:
        node_id:
          type: integer
          description: Created node ID
        error:
          type: string
          description: Error message if creation failed

    UpdateNodeRequest:
      type: object
      required:
        - id
        - properties
      properties:
        id:
          type: integer
          description: Node ID to update
        properties:
          type: object
          description: Updated properties
          additionalProperties: true

    UpdateNodeResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Whether update was successful
        error:
          type: string
          description: Error message if update failed

    DeleteNodeRequest:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          description: Node ID to delete

    DeleteNodeResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Whether deletion was successful
        error:
          type: string
          description: Error message if deletion failed

    CreateRelRequest:
      type: object
      required:
        - src
        - dst
        - type
      properties:
        src:
          type: integer
          description: Source node ID
        dst:
          type: integer
          description: Destination node ID
        type:
          type: string
          description: Relationship type
        properties:
          type: object
          description: Relationship properties
          additionalProperties: true

    CreateRelResponse:
      type: object
      properties:
        rel_id:
          type: integer
          description: Created relationship ID
        error:
          type: string
          description: Error message if creation failed

    StatsResponse:
      type: object
      properties:
        catalog:
          type: object
          properties:
            total_labels:
              type: integer
              description: Total number of node labels
            total_types:
              type: integer
              description: Total number of relationship types
            total_keys:
              type: integer
              description: Total number of property keys
        label_index:
          type: object
          properties:
            indexed_labels:
              type: integer
              description: Number of indexed labels
            total_nodes:
              type: integer
              description: Total number of nodes
        knn_index:
          type: object
          properties:
            total_vectors:
              type: integer
              description: Total number of vectors
            dimension:
              type: integer
              description: Vector dimension
        error:
          type: string
          description: Error message if operation failed

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Error message
        code:
          type: string
          description: Error code
        details:
          type: object
          description: Additional error details
          additionalProperties: true

tags:
  - name: System
    description: System health and statistics endpoints
  - name: Queries
    description: Cypher query execution
  - name: Vector Search
    description: KNN vector similarity search
  - name: Data Management
    description: Node and relationship management
  - name: Schema
    description: Schema management (labels and relationship types)
  - name: Streaming
    description: Server-Sent Events streaming endpoints